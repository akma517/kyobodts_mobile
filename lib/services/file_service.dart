import 'dart:io';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:permission_handler/permission_handler.dart';
import '../models/attachment.dart';
import 'attachment_service.dart';

class FileService {
  static Future<void> downloadAndOpenFile(BuildContext context, Attachment attachment) async {
    print('üî• === FileService.downloadAndOpenFile START ===');
    print('üî• ÌååÏùºÎ™Ö: ${attachment.fileName}');
    print('üî• ÌååÏùº ÌÅ¨Í∏∞: ${attachment.fileSize} bytes');
    print('üî• ÌååÏùº Í≤ΩÎ°ú: ${attachment.filePath}');
    print('üî• Î¨ºÎ¶¨Ï†Å ÌååÏùºÎ™Ö: ${attachment.physicalFileName}');
    print('üî• ÌôïÏû•Ïûê: ${attachment.ext}');
    print('üî• BBS ID: ${attachment.bbsId}');
    print('üî• Î¨∏ÏÑú Î≤àÌò∏: ${attachment.docNumber}');
    
    // Í∂åÌïú ÌôïÏù∏
    if (Platform.isAndroid) {
      print('üî• Android ÌîåÎû´Ìèº - Ï†ÄÏû•ÏÜå Í∂åÌïú ÌôïÏù∏ Ï§ë...');
      final permission = await Permission.storage.request();
      print('üî• Ï†ÄÏû•ÏÜå Í∂åÌïú ÏÉÅÌÉú: ${permission.toString()}');
      if (!permission.isGranted) {
        print('‚ùå Ï†ÄÏû•ÏÜå Í∂åÌïúÏù¥ Í±∞Î∂ÄÎê®');
        _showErrorDialog(context, 'ÌååÏùº Îã§Ïö¥Î°úÎìúÎ•º ÏúÑÌï¥ Ï†ÄÏû•ÏÜå Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
        return;
      }
      print('‚úÖ Ï†ÄÏû•ÏÜå Í∂åÌïú ÏäπÏù∏Îê®');
    } else {
      print('üî• iOS ÌîåÎû´Ìèº - Í∂åÌïú ÌôïÏù∏ Î∂àÌïÑÏöî');
    }

    try {
      print('üî• Î°úÎî© Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú Ï§ë...');
      // Î°úÎî© Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const AlertDialog(
          content: Row(
            children: [
              CircularProgressIndicator(),
              SizedBox(width: 16),
              Text('ÌååÏùº Îã§Ïö¥Î°úÎìú Ï§ë...'),
            ],
          ),
        ),
      );

      print('üî• AttachmentServiceÎ•º ÌÜµÌïú ÌååÏùº Îã§Ïö¥Î°úÎìú ÏãúÏûë...');
      // ÌååÏùº Îã§Ïö¥Î°úÎìú
      final attachmentService = AttachmentService();
      final fileBytes = await attachmentService.downloadFile(attachment);
      
      print('üî• API ÏùëÎãµ Í≤ÄÏ¶ù Ï§ë...');
      if (fileBytes == null) {
        print('‚ùå ÌååÏùº Îã§Ïö¥Î°úÎìú Ïã§Ìå® - null ÏùëÎãµ');
        Navigator.pop(context);
        _showErrorDialog(context, 'ÏÑúÎ≤ÑÏóêÏÑú ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
      }
      
      if (fileBytes.isEmpty) {
        print('‚ùå ÌååÏùº Îã§Ïö¥Î°úÎìú Ïã§Ìå® - Îπà ÏùëÎãµ');
        Navigator.pop(context);
        _showErrorDialog(context, 'Îã§Ïö¥Î°úÎìúÎêú ÌååÏùºÏù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.');
        return;
      }
      
      print('‚úÖ ÌååÏùº Îã§Ïö¥Î°úÎìú ÏÑ±Í≥µ - ${fileBytes.length} bytes Î∞õÏùå');

      // iOS ÌååÏùº Ïï±ÏóêÏÑú Ï†ëÍ∑º Í∞ÄÎä•Ìïú ÎîîÎ†âÌÜ†Î¶¨Ïóê ÌååÏùº Ï†ÄÏû•
      print('üî• ÌååÏùº Ï†ÄÏû• ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏ Ï§ë...');
      Directory appDir;
      if (Platform.isIOS) {
        // iOS: ÌååÏùº Ïï±ÏóêÏÑú Ï†ëÍ∑º Í∞ÄÎä•Ìïú ÎîîÎ†âÌÜ†Î¶¨ ÏÇ¨Ïö©
        appDir = await getApplicationDocumentsDirectory();
        // Downloads Ìè¥Îçî ÏÉùÏÑ±
        final downloadsDir = Directory('${appDir.path}/Downloads');
        if (!await downloadsDir.exists()) {
          await downloadsDir.create(recursive: true);
        }
        appDir = downloadsDir;
      } else {
        // Android: Ïô∏Î∂Ä Ï†ÄÏû•ÏÜå ÏÇ¨Ïö©
        appDir = await getExternalStorageDirectory() ?? await getApplicationDocumentsDirectory();
      }
      print('üî• Ïï± ÎîîÎ†âÌÜ†Î¶¨: ${appDir.path}');
      print('üî• ÎîîÎ†âÌÜ†Î¶¨ Ï°¥Ïû¨ Ïó¨Î∂Ä: ${await Directory(appDir.path).exists()}');
      
      final filePath = '${appDir.path}/${attachment.fileName}';
      print('üî• ÌååÏùº Ï†ÄÏû• Í≤ΩÎ°ú: $filePath');
      
      final file = File(filePath);
      print('üî• ÌååÏùº Ïì∞Í∏∞ ÏãúÏûë...');
      await file.writeAsBytes(fileBytes);
      print('üî• ÌååÏùº Ïì∞Í∏∞ ÏôÑÎ£å');
      
      // ÌååÏùº Ï†ÄÏû• Í≤ÄÏ¶ù
      final fileExists = await file.exists();
      print('üî• ÌååÏùº Ï°¥Ïû¨ ÌôïÏù∏: $fileExists');
      
      if (!fileExists) {
        print('‚ùå ÌååÏùº Ï†ÄÏû• Ïã§Ìå® - ÌååÏùºÏù¥ ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏùå');
        Navigator.pop(context);
        _showErrorDialog(context, 'ÌååÏùº Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        return;
      }
      
      final savedFileSize = await file.length();
      print('üî• Ï†ÄÏû•Îêú ÌååÏùº ÌÅ¨Í∏∞: $savedFileSize bytes');
      print('üî• ÏõêÎ≥∏ ÌååÏùº ÌÅ¨Í∏∞: ${fileBytes.length} bytes');
      
      if (savedFileSize != fileBytes.length) {
        print('‚ö†Ô∏è ÌååÏùº ÌÅ¨Í∏∞ Î∂àÏùºÏπò - Ï†ÄÏû•: $savedFileSize, ÏõêÎ≥∏: ${fileBytes.length}');
      }
      
      if (savedFileSize == 0) {
        print('‚ùå Ï†ÄÏû•Îêú ÌååÏùºÏù¥ ÎπÑÏñ¥ÏûàÏùå');
        Navigator.pop(context);
        _showErrorDialog(context, 'Ï†ÄÏû•Îêú ÌååÏùºÏù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.');
        return;
      }

      Navigator.pop(context); // Î°úÎî© Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
      print('üî• Î°úÎî© Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Ïùå');

      // ÏÑ±Í≥µ ÌÜ†Ïä§Ìä∏ ÏïåÎ¶º ÌëúÏãú
      final locationMessage = Platform.isIOS 
          ? 'ÌååÏùº Ïï± > ÎÇ¥ iPhone > ÍµêÎ≥¥DTS > Downloads Ìè¥ÎçîÏóêÏÑú ÌôïÏù∏ Í∞ÄÎä•'
          : 'Îã§Ïö¥Î°úÎìú Ìè¥ÎçîÏóê Ï†ÄÏû•Îê®';
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('ÌååÏùº Îã§Ïö¥Î°úÎìú ÏôÑÎ£å: ${attachment.fileName}'),
              Text(locationMessage, style: const TextStyle(fontSize: 12)),
            ],
          ),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 5),
        ),
      );
      print('‚úÖ ÌååÏùº Îã§Ïö¥Î°úÎìú ÏÑ±Í≥µ ÌÜ†Ïä§Ìä∏ ÏïåÎ¶º ÌëúÏãú');
      print('‚úÖ ÏµúÏ¢Ö ÌååÏùº Í≤ΩÎ°ú: $filePath');
      
    } catch (e, stackTrace) {
      print('‚ùå ÌååÏùº Îã§Ïö¥Î°úÎìú Ï§ë Ïò§Î•ò Î∞úÏÉù: $e');
      print('‚ùå Ïò§Î•ò Ïä§ÌÉù Ìä∏Î†àÏù¥Ïä§: $stackTrace');
      Navigator.pop(context); // Î°úÎî© Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
      _showErrorDialog(context, 'ÌååÏùº Îã§Ïö¥Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§:\n$e');
    }
    
    print('üî• === FileService.downloadAndOpenFile END ===');
  }



  static void _showErrorDialog(BuildContext context, String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Ïò§Î•ò'),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÌôïÏù∏'),
          ),
        ],
      ),
    );
  }

  static IconData getFileIcon(String fileType) {
    switch (fileType.toLowerCase()) {
      case 'pdf':
        return Icons.picture_as_pdf;
      case 'doc':
      case 'docx':
        return Icons.description;
      case 'xls':
      case 'xlsx':
        return Icons.table_chart;
      case 'ppt':
      case 'pptx':
        return Icons.slideshow;
      case 'jpg':
      case 'jpeg':
      case 'png':
      case 'gif':
      case 'webp':
        return Icons.image;
      case 'zip':
      case 'rar':
        return Icons.archive;
      default:
        return Icons.insert_drive_file;
    }
  }
}